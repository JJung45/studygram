<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.studygram.mapper.NotificationMapper">
    <resultMap id="notificationResultMap" type="com.studygram.domain.Notification">
        <id column="idx" property="idx"/>
        <id column="fromUserIdx" property="fromUserIdx"/>
        <id column="toUserIdx" property="toUserIdx"/>
        <id column="isRead" property="isRead"/>
        <id column="notificationIdx" property="notificationIdx"></id>
        <id column="notificationType" property="notificationType"></id>
        <id column="createdDate" property="createdDate"/>
        <association javaType="com.studygram.domain.Post" property="post">
            <result column="postIdx" property="idx"></result>
            <result column="imageStorePath" property="storePath"></result>
        </association>
        <association javaType="com.studygram.domain.Comment" property="comment">
            <result column="commentContent" property="content"></result>
        </association>
        <association javaType="com.studygram.domain.User" property="fromUser">
            <result column="fromUserIdx" property="idx"></result>
            <result column="fromUserUserName" property="userName"></result>
            <result column="fromUserUserProfileImageUrl" property="profileImageUrl"></result>
        </association>
        <association javaType="com.studygram.domain.User" property="toUser">
            <result column="toUserIdx" property="idx"></result>
            <result column="toUserUserName" property="userName"></result>
            <result column="toUserUserProfileImageUrl" property="profileImageUrl"></result>
        </association>
    </resultMap>
    <insert id="save" parameterType="Notification">
        insert into notification
            (from_user_idx, to_user_idx, isRead, notificationType)
        values
            (#{fromUserIdx}, #{toUserIdx}, #{isRead}, #{notificationType})
        <selectKey resultType="int" keyProperty="idx" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <insert id="saveNotificationComment" parameterType="NotificationComment">
        insert into notification_comment
            (notification_idx, comment_idx)
        values
            (#{notificationIdx}, #{commentIdx})
    </insert>

    <insert id="saveNotificationLike" parameterType="NotificationLike">
        insert into notification_like
            (notification_idx, like_idx)
        values
            (#{notificationIdx}, #{likeIdx})
    </insert>

    <select id="getNotifications" parameterType="Integer" resultMap="notificationResultMap">
        SELECT
            notification.from_user_idx AS fromUserIdx,
            notification.to_user_idx AS toUserIdx,
            notification.isRead AS isRead,
            notification.created_date AS createdDate,
            notification.notificationType AS notificationType,
            comment.content AS commentContent,
            image.store_path AS imageStorePath,
            fromuser.idx AS fromUserIdx,
            fromuser.user_name AS fromUserUserName,
            fromuser.profile_image_url AS fromUserUserProfileImageUrl,
            touser.idx AS toUserIdx,
            touser.user_name AS toUserUserName,
            touser.profile_image_url AS toUserUserProfileImageUrl,
            post.idx AS postIdx
        FROM
            notification
        LEFT JOIN notification_like nl ON notification.idx = nl.notification_idx
        LEFT JOIN `like` ON nl.like_idx = `like`.idx
        LEFT JOIN notification_comment cm ON notification.idx = cm.notification_idx
        LEFT JOIN `comment` ON cm.comment_idx = comment.idx
        INNER JOIN post ON (`like`.post_idx = post.idx OR comment.post_idx = post.idx)
        LEFT JOIN image_post ip ON post.idx = ip.post_idx
        LEFT JOIN image ON ip.image_idx = image.idx
        INNER JOIN `user` touser ON notification.to_user_idx = #{toUserIdx}
        INNER JOIN `user` fromuser ON notification.from_user_idx = fromuser.idx
        WHERE notification.isRead = 0
    </select>
    <select id="getNotReadNotificationsCount" parameterType="Integer" resultType="int">
        select
            count(idx)
        from
            notification
        where
            to_user_idx = #{toUserIdx} and isRead = 0
    </select>
</mapper>