<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.studygram.mapper.CommentMapper">
    <resultMap id="commentResultMap" type="com.studygram.domain.Comment">
        <id column="idx" property="idx"/>
        <result column="post_idx" property="postIdx"/>
        <result column="user_name" property="userName"/>
        <!--        <result column="profile_image_url" property="profileImageUrl"/>-->
        <result column="content" property="content"/>
        <result column="created_date" property="createdDate"/>
        <result column="updated_date" property="updatedDate"/>
        <result column="user_idx" property="userIdx"/>
        <!-- collection Type은 마지막 -->
        <!-- Tag Idx 컬럼값만 가져올때 사용
        <collection property="tags" column="post_idx" javaType="java.util.ArrayList" ofType="com.studygram.domain.Tag" select="getTagListBypostIdx" />
        -->
<!--        <collection property="tags" column="idx" javaType="java.util.ArrayList" ofType="com.studygram.domain.Tag" select="com.studygram.mapper.TagMapper.findTagsByCommentIdx" />-->
        <collection property="profileImageUrl" column="user_idx" ofType="java.lang.String" select="com.studygram.mapper.ImageMapper.findRecentImageByUserIdx" />
        <collection property="likes" column="idx" javaType="java.util.ArrayList" ofType="com.studygram.domain.Like" select="com.studygram.mapper.LikeMapper.findLikesByCommentIdx" />
    </resultMap>

    <select id="findCommentsByPostIdx" resultMap="commentResultMap">
        select t1.idx as idx, t1.post_idx as post_idx, t1.user_idx as user_idx, t1.content as content, t2.profile_image_url as profile_image_url, t1.created_date as created_date
        from comment t1
            left join user t2 on t1.user_idx = t2.idx
        where t1.post_idx = #{postIdx}
        order by t1.idx desc
--         limit 3 offset 0
    </select>
    <select id="findCommentsByPostIdxWithPaging" resultMap="commentResultMap">
        select t1.idx as idx, t1.post_idx as post_idx, t2.idx as user_idx, t2.user_name as user_name, t1.content as content
            from comment t1
                left join user t2 on t1.user_idx = t2.idx
            where 1 = 1
              and t1.post_idx = #{postIdx}
        order by t1.idx desc
        limit #{limit}
        offset #{offset}
    </select>

    <select id="findByCommentIdx" resultType="Comment">
        select t1.idx as idx, t1.post_idx as post_idx, t2.idx as user_idx, t2.user_name, t1.content as content
            from comment t1
                 left join user t2 on t1.user_idx = t2.idx
        where t1.idx = #{commentIdx}
    </select>
    <select id="getCommentCntByPostIdx" resultType="int">
        select count(*) from comment
            where comment.post_idx = #{postIdx}
    </select>

    <insert id="save" parameterType="Comment">
        insert into comment(post_idx, user_idx, content)
            values (#{postIdx}, #{userIdx}, #{content})
        <selectKey resultType="int" keyProperty="idx" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <update id="update" parameterType="Comment">
        update comment set content = #{content}, updated_date = #{updatedDate}
        where post_idx = #{postIdx}
    </update>

    <delete id="deleteByCommentId">
        delete from comment where idx = #{commentIdx}
    </delete>
    <delete id="deleteByPostIdx">
        delete from comment where post_idx = #{postIdx}
    </delete>

    <select id="findComments" parameterType="Integer" resultType="Comment">
        select * from comment where post_idx = #{postIdx}
    </select>

    <select id="findCommentCntByPostIdx" parameterType="Integer" resultType="Integer">
        select count(*)
        from comment
        where 1 = 1
          and post_idx = #{idx}
    </select>
</mapper>