<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.studygram.mapper.PostTagMapper">
    <delete id="deleteTagsByPost" parameterType="Post">
        delete from post_tag where post_idx = #{idx}
    </delete>
    <insert id="save">
        insert into post_tag (post_idx, tag_idx)
        values(#{post}, #{tag})
    </insert>
    <select id="findPostTagsByTag" parameterType="Tag" resultType="PostTag">
        select * from post_tag where tag_idx = #{idx}
    </select>
    <select id="findTags" parameterType="Post" resultType="Tag">
        select * from tag left join post_tag on tag.idx = post_tag.tag_idx where post_idx = #{idx}
    </select>

    <resultMap id="postTagResultMap" type="com.studygram.domain.Post">
        <id column="idx" property="idx"/>
        <result column="user_idx" property="userIdx"/>
        <result column="content" property="content"/>
        <result column="store_path" property="storePath"/>
        <result column="created_date" property="createdDate"/>
        <result column="updated_date" property="updatedDate"/>
        <result column="user_name" property="userName"/>
        <collection property="profileImageUrl" column="user_idx" ofType="java.lang.String" select="com.studygram.mapper.ImageMapper.findRecentImageByUserIdx" />
        <collection property="commentCnt" column="idx" select="com.studygram.mapper.CommentMapper.findCommentCntByPostIdx"/>
    </resultMap>
    <select id="findPostsByTagIdx" parameterType="Integer" resultMap="postTagResultMap">
        WITH T as (
        select p.idx, p.user_idx, p.content, img.store_path, p.created_date, p.updated_date, u.user_name
          from post p, image img, user u
         where p.idx in (select post_idx
                           from post_tag
                          where tag_idx = #{tagIdx})
        and p.idx = img.post_idx
        and p.user_idx = u.idx)

        select T.*, coalesce(li.cnt, 0) likeCnt
        from T
        left outer join (select post_idx, count(idx) cnt from `like` group by post_idx) li
        on T.idx = li.post_idx
        order by
        <if test="ordering == 0">
            -- 좋아요 순 정렬
            likeCnt desc
        </if>
        <if test="ordering == 1">
            -- 최신 순 정렬
            p.created_date desc
        </if>
    </select>

</mapper>